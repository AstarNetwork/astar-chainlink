{
  "address": "0xE8dB0bcF8f4F590E8EDba37C81E686311843f2dF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "latest",
          "type": "address"
        }
      ],
      "name": "AggregatorConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "current",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposed",
          "type": "address"
        }
      ],
      "name": "AggregatorProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregatorAddress",
          "type": "address"
        }
      ],
      "name": "confirmAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "phaseId",
          "type": "uint16"
        }
      ],
      "name": "phaseAggregators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phaseId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregatorAddress",
          "type": "address"
        }
      ],
      "name": "proposeAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        }
      ],
      "name": "proposedGetRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedLatestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "id",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6a189ca530720d1adca3fe60901259481e3c3c60f6ea3a8b8386b7b0a68e889",
  "receipt": {
    "to": null,
    "from": "0xc19Fe528555B383Dc0DCa0e48eC0170f4c52790F",
    "contractAddress": "0xE8dB0bcF8f4F590E8EDba37C81E686311843f2dF",
    "transactionIndex": 0,
    "gasUsed": "1116854",
    "logsBloom": "0x
    "blockHash": "0x064dc622d315d37ad81323903e826a311626911e42d5c3f46fe261375743e14a",
    "transactionHash": "0xd6a189ca530720d1adca3fe60901259481e3c3c60f6ea3a8b8386b7b0a68e889",
    "logs": [],
    "blockNumber": 1091136,
    "cumulativeGasUsed": "1116854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9769926dD1FD4C7eCb346251567D4b6980b4217B"
  ],
  "numDeployments": 2,
  "solcInputHash": "33fb47d313fc0b2cd8ad849bf69137f3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"latest\",\"type\":\"address\"}],\"name\":\"AggregatorConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"AggregatorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirmAggregator(address)\":{\"details\":\"Reverts if the given address doesn't match what was previously proposed\",\"params\":{\"aggregatorAddress\":\"The new address for the aggregator contract\"}},\"getAnswer(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"roundId\":\"the answer number to retrieve the answer for\"}},\"getRoundData(uint80)\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"params\":{\"roundId\":\"the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"getTimestamp(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"roundId\":\"the answer number to retrieve the updated timestamp for\"}},\"latestAnswer()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRound()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRoundData()\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"latestTimestamp()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"phaseAggregators(uint16)\":{\"params\":{\"phaseId\":\"uint16\"}},\"proposeAggregator(address)\":{\"params\":{\"aggregatorAddress\":\"The new address for the aggregator contract\"}},\"proposedGetRoundData(uint80)\":{\"params\":{\"roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"proposedLatestRoundData()\":{\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}}},\"title\":\"A trusted proxy for updating where current answers are read from\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"aggregator()\":{\"notice\":\"returns the current phase's aggregator address.\"},\"confirmAggregator(address)\":{\"notice\":\"Allows the owner to confirm and change the address to the proposed aggregator\"},\"decimals()\":{\"notice\":\"represents the number of decimals the aggregator responses represent.\"},\"description()\":{\"notice\":\"returns the description of the aggregator the proxy points to.\"},\"getAnswer(uint256)\":{\"notice\":\"get past rounds answers\"},\"getRoundData(uint80)\":{\"notice\":\"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"getTimestamp(uint256)\":{\"notice\":\"get block timestamp when an answer was last updated\"},\"latestAnswer()\":{\"notice\":\"Reads the current answer from aggregator delegated to.\"},\"latestRound()\":{\"notice\":\"get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator.\"},\"latestRoundData()\":{\"notice\":\"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"latestTimestamp()\":{\"notice\":\"Reads the last updated height from aggregator delegated to.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"phaseAggregators(uint16)\":{\"notice\":\"return a phase aggregator using the phaseId\"},\"phaseId()\":{\"notice\":\"returns the current phase's ID.\"},\"proposeAggregator(address)\":{\"notice\":\"Allows the owner to propose a new address for the aggregator\"},\"proposedAggregator()\":{\"notice\":\"returns the current proposed aggregator\"},\"proposedGetRoundData(uint80)\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"proposedLatestRoundData()\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"version()\":{\"notice\":\"the version number representing the type of aggregator the proxy points to.\"}},\"notice\":\"This contract provides a consistent address for the CurrentAnswerInterface but delegates where it reads from to the owner, who is trusted to update it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol\":\"AggregatorProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xba5a8452dcb14e3fecb9f39e415db6cd8b45cbe0a03899febe4f5e715396a9cc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd9c444260e0ed47bfcf49f269fa52af499e6707b741ae49c7d79e49168c9e4b2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../ConfirmedOwner.sol\\\";\\nimport \\\"../interfaces/AggregatorProxyInterface.sol\\\";\\n\\n/**\\n * @title A trusted proxy for updating where current answers are read from\\n * @notice This contract provides a consistent address for the\\n * CurrentAnswerInterface but delegates where it reads from to the owner, who is\\n * trusted to update it.\\n */\\ncontract AggregatorProxy is AggregatorProxyInterface, ConfirmedOwner {\\n  struct Phase {\\n    uint16 id;\\n    AggregatorProxyInterface aggregator;\\n  }\\n  AggregatorProxyInterface private s_proposedAggregator;\\n  mapping(uint16 => AggregatorProxyInterface) private s_phaseAggregators;\\n  Phase private s_currentPhase;\\n\\n  uint256 private constant PHASE_OFFSET = 64;\\n  uint256 private constant PHASE_SIZE = 16;\\n  uint256 private constant MAX_ID = 2**(PHASE_OFFSET + PHASE_SIZE) - 1;\\n\\n  event AggregatorProposed(address indexed current, address indexed proposed);\\n  event AggregatorConfirmed(address indexed previous, address indexed latest);\\n\\n  constructor(address aggregatorAddress) ConfirmedOwner(msg.sender) {\\n    setAggregator(aggregatorAddress);\\n  }\\n\\n  /**\\n   * @notice Reads the current answer from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer() public view virtual override returns (int256 answer) {\\n    return s_currentPhase.aggregator.latestAnswer();\\n  }\\n\\n  /**\\n   * @notice Reads the last updated height from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp() public view virtual override returns (uint256 updatedAt) {\\n    return s_currentPhase.aggregator.latestTimestamp();\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param roundId the answer number to retrieve the answer for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 roundId) public view virtual override returns (int256 answer) {\\n    if (roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\\n    AggregatorProxyInterface aggregator = s_phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getAnswer(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get block timestamp when an answer was last updated\\n   * @param roundId the answer number to retrieve the updated timestamp for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 roundId) public view virtual override returns (uint256 updatedAt) {\\n    if (roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\\n    AggregatorProxyInterface aggregator = s_phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getTimestamp(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated. This\\n   * ID includes the proxy's phase, to make sure round IDs increase even when\\n   * switching to a newly deployed aggregator.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound() public view virtual override returns (uint256 roundId) {\\n    Phase memory phase = s_currentPhase; // cache storage reads\\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @param roundId the requested round ID as presented through the proxy, this\\n   * is made up of the aggregator's round ID with the phase ID encoded in the\\n   * two highest order bytes\\n   * @return id is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\\n\\n    (id, answer, startedAt, updatedAt, answeredInRound) = s_phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\\n\\n    return addPhaseIds(id, answer, startedAt, updatedAt, answeredInRound, phaseId);\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @return id is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    Phase memory current = s_currentPhase; // cache storage reads\\n\\n    (id, answer, startedAt, updatedAt, answeredInRound) = current.aggregator.latestRoundData();\\n\\n    return addPhaseIds(id, answer, startedAt, updatedAt, answeredInRound, current.id);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @param roundId the round ID to retrieve the round data for\\n   * @return id is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   */\\n  function proposedGetRoundData(uint80 roundId)\\n    external\\n    view\\n    virtual\\n    override\\n    hasProposal\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return s_proposedAggregator.getRoundData(roundId);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @return id is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   */\\n  function proposedLatestRoundData()\\n    external\\n    view\\n    virtual\\n    override\\n    hasProposal\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return s_proposedAggregator.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice returns the current phase's aggregator address.\\n   */\\n  function aggregator() external view override returns (address) {\\n    return address(s_currentPhase.aggregator);\\n  }\\n\\n  /**\\n   * @notice returns the current phase's ID.\\n   */\\n  function phaseId() external view override returns (uint16) {\\n    return s_currentPhase.id;\\n  }\\n\\n  /**\\n   * @notice represents the number of decimals the aggregator responses represent.\\n   */\\n  function decimals() external view override returns (uint8) {\\n    return s_currentPhase.aggregator.decimals();\\n  }\\n\\n  /**\\n   * @notice the version number representing the type of aggregator the proxy\\n   * points to.\\n   */\\n  function version() external view override returns (uint256) {\\n    return s_currentPhase.aggregator.version();\\n  }\\n\\n  /**\\n   * @notice returns the description of the aggregator the proxy points to.\\n   */\\n  function description() external view override returns (string memory) {\\n    return s_currentPhase.aggregator.description();\\n  }\\n\\n  /**\\n   * @notice returns the current proposed aggregator\\n   */\\n  function proposedAggregator() external view override returns (address) {\\n    return address(s_proposedAggregator);\\n  }\\n\\n  /**\\n   * @notice return a phase aggregator using the phaseId\\n   *\\n   * @param phaseId uint16\\n   */\\n  function phaseAggregators(uint16 phaseId) external view override returns (address) {\\n    return address(s_phaseAggregators[phaseId]);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to propose a new address for the aggregator\\n   * @param aggregatorAddress The new address for the aggregator contract\\n   */\\n  function proposeAggregator(address aggregatorAddress) external onlyOwner {\\n    s_proposedAggregator = AggregatorProxyInterface(aggregatorAddress);\\n    emit AggregatorProposed(address(s_currentPhase.aggregator), aggregatorAddress);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to confirm and change the address\\n   * to the proposed aggregator\\n   * @dev Reverts if the given address doesn't match what was previously\\n   * proposed\\n   * @param aggregatorAddress The new address for the aggregator contract\\n   */\\n  function confirmAggregator(address aggregatorAddress) external onlyOwner {\\n    require(aggregatorAddress == address(s_proposedAggregator), \\\"Invalid proposed aggregator\\\");\\n    address previousAggregator = address(s_currentPhase.aggregator);\\n    delete s_proposedAggregator;\\n    setAggregator(aggregatorAddress);\\n    emit AggregatorConfirmed(previousAggregator, aggregatorAddress);\\n  }\\n\\n  /*\\n   * Internal\\n   */\\n\\n  function setAggregator(address aggregatorAddress) internal {\\n    uint16 id = s_currentPhase.id + 1;\\n    s_currentPhase = Phase(id, AggregatorProxyInterface(aggregatorAddress));\\n    s_phaseAggregators[id] = AggregatorProxyInterface(aggregatorAddress);\\n  }\\n\\n  function addPhase(uint16 phase, uint64 originalId) internal pure returns (uint80) {\\n    return uint80((uint256(phase) << PHASE_OFFSET) | originalId);\\n  }\\n\\n  function parseIds(uint256 roundId) internal pure returns (uint16, uint64) {\\n    uint16 phaseId = uint16(roundId >> PHASE_OFFSET);\\n    uint64 aggregatorRoundId = uint64(roundId);\\n\\n    return (phaseId, aggregatorRoundId);\\n  }\\n\\n  function addPhaseIds(\\n    uint80 roundId,\\n    int256 answer,\\n    uint256 startedAt,\\n    uint256 updatedAt,\\n    uint80 answeredInRound,\\n    uint16 phaseId\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    return (\\n      addPhase(phaseId, uint64(roundId)),\\n      answer,\\n      startedAt,\\n      updatedAt,\\n      addPhase(phaseId, uint64(answeredInRound))\\n    );\\n  }\\n\\n  /*\\n   * Modifiers\\n   */\\n\\n  modifier hasProposal() {\\n    require(address(s_proposedAggregator) != address(0), \\\"No proposed aggregator present\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5c06d7cd6bb91216be94ac92ab8ace4d64bc8f64ecf42b30f46dc367c7061f1b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x682963fa630d6afc8e1fcc5b3ee6b49ec1216f30ac698bca43747bd6e8a19fd6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/AggregatorProxyInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface AggregatorProxyInterface is AggregatorV2V3Interface {\\n  function phaseAggregators(uint16 phaseId) external view returns (address);\\n\\n  function phaseId() external view returns (uint16);\\n\\n  function proposedAggregator() external view returns (address);\\n\\n  function proposedGetRoundData(uint80 roundId)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function aggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x835015c904e6b9b5c5ddf96f74b39a36c787dc7fa5ccd776ca0f02d0ce5cca90\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xc0c5994fc656e4393d2ca4e5128f658de92637346bbd943041c50d9ffbc8aa8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x5cf082133e64f5f90f446c011681ea7ab719e2992c7247074b943771c176494a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x5b0ba0302a06c80ff88368c02dab44a0d9b735a599ba6ff905284044f02f2932\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b633620c1161008c578063f2fde38b11610066578063f2fde38b146103cb578063f8a2abd3146103f1578063feaf968c1461041757610177565b8063b633620c14610385578063c1597304146103a2578063e8c4be30146103c357610177565b80639a6fc8f5116100bd5780639a6fc8f514610319578063a928c09614610342578063b5ab58dc1461036857610177565b80638da5cb5b146103095780638f6b4d911461031157610177565b80636001ac531161012f5780637284e416116101145780637284e4161461027a57806379ba5097146102f75780638205bf6a1461030157610177565b80636001ac53146101ff578063668a0f021461027257610177565b806350d25bcd1161016057806350d25bcd146101be57806354fd4d50146101d857806358303b10146101e057610177565b8063245a7bfc1461017c578063313ce567146101a0575b600080fd5b61018461041f565b604080516001600160a01b039092168252519081900360200190f35b6101a8610434565b6040805160ff9092168252519081900360200190f35b6101c66104b8565b60408051918252519081900360200190f35b6101c661050b565b6101e861055e565b6040805161ffff9092168252519081900360200190f35b6102286004803603602081101561021557600080fd5b503569ffffffffffffffffffff16610568565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6101c661067a565b610282610745565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff61088a565b005b6101c6610940565b610184610993565b6102286109a2565b6102286004803603602081101561032f57600080fd5b503569ffffffffffffffffffff16610aaa565b6102ff6004803603602081101561035857600080fd5b50356001600160a01b0316610ba7565b6101c66004803603602081101561037e57600080fd5b5035610c80565b6101c66004803603602081101561039b57600080fd5b5035610d60565b610184600480360360208110156103b857600080fd5b503561ffff16610e09565b610184610e28565b6102ff600480360360208110156103e157600080fd5b50356001600160a01b0316610e37565b6102ff6004803603602081101561040757600080fd5b50356001600160a01b0316610e4b565b610228610eac565b6004546201000090046001600160a01b031690565b6000600460000160029054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561048757600080fd5b505afa15801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b5051905090565b6000600460000160029054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048757600080fd5b6000600460000160029054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561048757600080fd5b60045461ffff1690565b60025460009081908190819081906001600160a01b03166105d0576040805162461bcd60e51b815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b60025460408051639a6fc8f560e01b815269ffffffffffffffffffff8916600482015290516001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b505050506040513d60a081101561065157600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b600061068461119f565b506040805180820182526004805461ffff8116808452620100009091046001600160a01b0316602080850182905285517f668a0f0200000000000000000000000000000000000000000000000000000000815295519495610733959394929363668a0f02938281019392829003018186803b15801561070257600080fd5b505afa158015610716573d6000803e3d6000fd5b505050506040513d602081101561072c57600080fd5b5051610fac565b69ffffffffffffffffffff1691505090565b6060600460000160029054906101000a90046001600160a01b03166001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156107d557600080fd5b81019080805160405193929190846401000000008211156107f557600080fd5b90830190602082018581111561080a57600080fd5b825164010000000081118282018810171561082457600080fd5b82525081516020918201929091019080838360005b83811015610851578181015183820152602001610839565b50505050905090810190601f16801561087e5780820380516001836020036101000a031916815260200191505b50604052505050905090565b6001546001600160a01b031633146108e9576040805162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000600460000160029054906101000a90046001600160a01b03166001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048757600080fd5b6000546001600160a01b031690565b60025460009081908190819081906001600160a01b0316610a0a576040805162461bcd60e51b815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d60a0811015610a8257600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b6000806000806000806000610aca8869ffffffffffffffffffff16610fcc565b61ffff821660009081526003602052604090819020548151639a6fc8f560e01b815267ffffffffffffffff8416600482015291519395509193506001600160a01b0390911691639a6fc8f59160248082019260a092909190829003018186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d60a0811015610b6057600080fd5b508051602082015160408301516060840151608090940151929a5090985096509094509250610b93878787878787610fd4565b939c929b5090995097509095509350505050565b610baf61100a565b6002546001600160a01b03828116911614610c11576040805162461bcd60e51b815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600454600280546001600160a01b03191690556201000090046001600160a01b0316610c3c8261106b565b816001600160a01b0316816001600160a01b03167f33745f67a407dcb785417f9c123dd3641479a102674b6e35c1f10975625b90e960405160405180910390a35050565b600069ffffffffffffffffffff821115610c9c57506000610d5b565b600080610ca884610fcc565b61ffff821660009081526003602052604090205491935091506001600160a01b031680610cdb5760009350505050610d5b565b806001600160a01b031663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b158015610d2957600080fd5b505afa158015610d3d573d6000803e3d6000fd5b505050506040513d6020811015610d5357600080fd5b505193505050505b919050565b600069ffffffffffffffffffff821115610d7c57506000610d5b565b600080610d8884610fcc565b61ffff821660009081526003602052604090205491935091506001600160a01b031680610dbb5760009350505050610d5b565b806001600160a01b031663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b158015610d2957600080fd5b61ffff166000908152600360205260409020546001600160a01b031690565b6002546001600160a01b031690565b610e3f61100a565b610e48816110f0565b50565b610e5361100a565b600280546001600160a01b0319166001600160a01b0383811691821790925560045460405191926201000090910416907fc0f151710f03d713b71d9970cee0d5b11ddc9a7552abaa3f6ee818010f21600d90600090a350565b6000806000806000610ebc61119f565b506040805180820182526004805461ffff811683526201000090046001600160a01b03166020830181905283517ffeaf968c00000000000000000000000000000000000000000000000000000000815293519293909263feaf968c928281019260a0929190829003018186803b158015610f3557600080fd5b505afa158015610f49573d6000803e3d6000fd5b505050506040513d60a0811015610f5f57600080fd5b5080516020820151604083015160608401516080909401518551939a509198509650919450909250610f9a9087908790879087908790610fd4565b95509550955095509550509091929394565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b6000806000806000610fe6868c610fac565b8a8a8a610ff38a8c610fac565b939f929e50909c509a509098509650505050505050565b6000546001600160a01b03163314611069576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b60048054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff1990931685177fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000084021790935560009384526003909252912080546001600160a01b0319169091179055565b6001600160a01b03811633141561114e576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60408051808201909152600080825260208201529056fea26469706673582212205a67869680c6f712fa97c56cd4b7508548925e64e930b1b4ff16f8e4e594640764736f6c63430007000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirmAggregator(address)": {
        "details": "Reverts if the given address doesn't match what was previously proposed",
        "params": {
          "aggregatorAddress": "The new address for the aggregator contract"
        }
      },
      "getAnswer(uint256)": {
        "details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "roundId": "the answer number to retrieve the answer for"
        }
      },
      "getRoundData(uint80)": {
        "details": "Note that answer and updatedAt may change between queries.",
        "params": {
          "roundId": "the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "getTimestamp(uint256)": {
        "details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "roundId": "the answer number to retrieve the updated timestamp for"
        }
      },
      "latestAnswer()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRound()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRoundData()": {
        "details": "Note that answer and updatedAt may change between queries.",
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "latestTimestamp()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "phaseAggregators(uint16)": {
        "params": {
          "phaseId": "uint16"
        }
      },
      "proposeAggregator(address)": {
        "params": {
          "aggregatorAddress": "The new address for the aggregator contract"
        }
      },
      "proposedGetRoundData(uint80)": {
        "params": {
          "roundId": "the round ID to retrieve the round data for"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed.",
          "id": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "proposedLatestRoundData()": {
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed.",
          "id": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      }
    },
    "title": "A trusted proxy for updating where current answers are read from",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "aggregator()": {
        "notice": "returns the current phase's aggregator address."
      },
      "confirmAggregator(address)": {
        "notice": "Allows the owner to confirm and change the address to the proposed aggregator"
      },
      "decimals()": {
        "notice": "represents the number of decimals the aggregator responses represent."
      },
      "description()": {
        "notice": "returns the description of the aggregator the proxy points to."
      },
      "getAnswer(uint256)": {
        "notice": "get past rounds answers"
      },
      "getRoundData(uint80)": {
        "notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "getTimestamp(uint256)": {
        "notice": "get block timestamp when an answer was last updated"
      },
      "latestAnswer()": {
        "notice": "Reads the current answer from aggregator delegated to."
      },
      "latestRound()": {
        "notice": "get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator."
      },
      "latestRoundData()": {
        "notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "latestTimestamp()": {
        "notice": "Reads the last updated height from aggregator delegated to."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "phaseAggregators(uint16)": {
        "notice": "return a phase aggregator using the phaseId"
      },
      "phaseId()": {
        "notice": "returns the current phase's ID."
      },
      "proposeAggregator(address)": {
        "notice": "Allows the owner to propose a new address for the aggregator"
      },
      "proposedAggregator()": {
        "notice": "returns the current proposed aggregator"
      },
      "proposedGetRoundData(uint80)": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "proposedLatestRoundData()": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "version()": {
        "notice": "the version number representing the type of aggregator the proxy points to."
      }
    },
    "notice": "This contract provides a consistent address for the CurrentAnswerInterface but delegates where it reads from to the owner, who is trusted to update it.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 197,
        "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
        "label": "s_proposedAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorProxyInterface)934"
      },
      {
        "astId": 201,
        "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
        "label": "s_phaseAggregators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_contract(AggregatorProxyInterface)934)"
      },
      {
        "astId": 203,
        "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
        "label": "s_currentPhase",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Phase)195_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorProxyInterface)934": {
        "encoding": "inplace",
        "label": "contract AggregatorProxyInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_contract(AggregatorProxyInterface)934)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => contract AggregatorProxyInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorProxyInterface)934"
      },
      "t_struct(Phase)195_storage": {
        "encoding": "inplace",
        "label": "struct AggregatorProxy.Phase",
        "members": [
          {
            "astId": 192,
            "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 194,
            "contract": "@chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol:AggregatorProxy",
            "label": "aggregator",
            "offset": 2,
            "slot": "0",
            "type": "t_contract(AggregatorProxyInterface)934"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}